--Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.
SELECT *
    FROM city
    WHERE population >100000 AND countrycode = 'USA';
    
--Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.
SELECT name
    FROM city
    WHERE population > 120000 AND countrycode = 'USA';
    
--Query all columns (attributes) for every row in the CITY table.
SELECT * FROM city

--Query all columns for a city in CITY with the ID 1661.
SELECT * 
    FROM city 
    WHERE id = 1661

--Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.
SELECT *
    FROM city
    WHERE countrycode = 'jpn'
    
--Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN. 
SELECT name
    FROM city
    WHERE countrycode = 'jpn'
    
--Query a list of CITY and STATE from the STATION table. 
SELECT city, state
    FROM station

--Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer. 
SELECT distinct (city)
    FROM station
    WHERE (id % 2) = 0

--Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table. 
SELECT  (COUNT(city)- COUNT(distinct(city)))
    FROM station
    
--Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically. 
SELECT city, LENGTH(city) AS length
    FROM station 
    ORDER BY length DESC, city ASC
    LIMIT 1;

SELECT city, LENGTH(city) AS length 
    FROM station
    ORDER BY length ASC, city asc
    LIMIT 1;

--Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.
SELECT distinct(city)
    FROM station
    WHERE city LIKE 'a%'
        OR city LIKE 'e%'
        OR city LIKE 'i%'
        OR city LIKE 'o%'
        OR city LIKE 'u%';

--Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
SELECT distinct city
    FROM station
    WHERE city LIKE '%a' 
    OR city LIKE '%e' 
    OR city LIKE '%i' 
    OR city LIKE '%o' 
    OR city LIKE '%u';

--Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.
SELECT distinct city 
    FROM station
    WHERE  city RLIKE '^[aeiouAEIOU].*[aeiouAEIOU]$';

--Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
SELECT distinct city
    FROM station 
    WHERE  city NOT RLIKE '^[aeiouAEIOU].*$';

--Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
SELECT distinct city
    FROM station
    WHERE city NOT RLIKE '^.*[aeiouAEIOU]$';

--Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.
SELECT distinct city 
    FROM station
    WHERE city NOT RLIKE '^[aeiouAEIOU].*[aeiouAEIOU]$';

--Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.
SELECT distinct city
    FROM station
    WHERE city NOT RLIKE '^[aeiouAEIOU].*$'
        AND city NOT RLIKE '^.*[aeiouAEIOU]$';

--Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
SELECT name 
    FROM students
    WHERE marks >75
    ORDER BY RIGHT (name,3), id;
    
--Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.
SELECT name
    FROM employee
    ORDER BY name;

--Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  per month who have been employees for less than  months. Sort your result by ascending employee_id.
SELECT name
    FROM employee
    WHERE salary > 2000 AND months < 10
    ORDER BY employee_id;

--Query the average population for all cities in CITY, rounded down to the nearest integer.
SELECT ROUND(AVG(population)) AS population
    FROM city;

--Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.
SELECT SUM(population)
    FROM city
    WHERE countrycode = 'jpn';
 
 --Query the difference between the maximum and minimum populations in CITY.
 SELECT MAX(population)- MIN(population)
    FROM city;
    
-- Find the difference between a miscalculated salary average (using salaries with any zeros removed), and the actual average salary.
Write a query calculating the amount of error and round it up to the next integer.    
SELECT CEILING(AVG(salary) - AVG(REPLACE(salary, '0', '')))
    FROM employees;
    
--Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings.    
SELECT salary * months AS total_earnings, COUNT(*)
    FROM employee
    GROUP BY total_earnings
    ORDER BY total_earnings DESC
    LIMIT 1;

--Query the following two values from the STATION table:
--The sum of all values in LAT_N rounded to a scale of  decimal places.
--The sum of all values in LONG_W rounded to a scale of  decimal places.
SELECT ROUND(SUM(lat_n),2), ROUND(SUM(long_w),2)
    FROM station;

--Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than  and less than . Truncate your answer to  decimal places.
SELECT ROUND(SUM(lat_n),4) AS lat_n
    FROM station
    WHERE lat_n BETWEEN 38.7880 AND 137.2345;


--Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than . Truncate your answer to  decimal places.
SELECT ROUND(MAX(lat_n),4)
    FROM station 
    WHERE lat_n < 137.2345;

--Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than . Round your answer to  decimal places.
SELECT ROUND(long_w,4)
    FROM station
    WHERE lat_n < 137.2345
    ORDER BY lat_n DESC
    LIMIT 1;

--Query the smallest Northern Latitude (LAT_N) from STATION that is greater than . Round your answer to  decimal places.
SELECT ROUND(MIN(lat_N),4)
    FROM station
    WHERE lat_n > 38.7780;

--Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than . Round your answer to  decimal places.
SELECT ROUND(long_w,4)
    FROM station
    WHERE lat_n > 38.7780
    ORDER BY lat_n
    LIMIT 1;

--Consider p1 and p2 to be two points on a 2D plane, query the Manhattan Distance between the points p1(a,b) and p2(c,d) round it to a scale of 4 decimal places.
SELECT ROUND(ABS(MAX(LAT_N) - MIN(LAT_N)) + ABS(MAX(LONG_W) - MIN(LONG_W)), 4) 
    FROM station;
 
--Query the Euclidean Distance between points  and  and format your answer to display  decimal digits.
SELECT ROUND(SQRT(POWER(MAX(LAT_N) - MIN(LAT_N), 2) + POWER(MAX(LONG_W) - MIN(LONG_W), 2)), 4)
    FROM station;

--Query the median of the Northern Latitudes (LAT_N) from STATION and round your answer to 4 decimal places.
SELECT ROUND(S1.LAT_N, 4) 
    FROM STATION AS S1 
    WHERE (SELECT ROUND(COUNT(S1.ID)/2) - 1 
           FROM STATION) = 
          (SELECT COUNT(S2.ID) 
           FROM STATION AS S2 
           WHERE S2.LAT_N > S1.LAT_N);


--challenges and contests. Write a query to print the contest_id, hacker_id, name, and the sums of total_submissions, total_accepted_submissions, total_views, and total_unique_views for each contest sorted by contest_id. Exclude the contest from the result if all four sums are .
SELECT contests.contest_id,
        contests.hacker_id, 
        contests.name, 
        SUM(total_submissions), 
        SUM(total_accepted_submissions), 
        SUM(total_views),
        SUM(total_unique_views)
  FROM contests 
  JOIN colleges ON contests.contest_id = colleges.contest_id 
  JOIN challenges ON colleges.college_id = challenges.college_id 
  LEFT JOIN (SELECT 
                challenge_id,
                SUM(total_views) AS total_views,
                SUM(total_unique_views) AS total_unique_views
            FROM view_stats
            GROUP BY challenge_id) T1
  ON challenges.challenge_id = T1.challenge_id 
  LEFT JOIN (SELECT
                challenge_id,
                SUM(total_submissions) AS total_submissions,
                SUM(total_accepted_submissions) AS total_accepted_submissions
            FROM submission_stats
            GROUP BY challenge_id) T2
  ON challenges.challenge_id = T2.challenge_id
  GROUP BY contests.contest_id, contests.hacker_id, contests.name
  HAVING SUM(total_submissions)!=0
  OR SUM(total_accepted_submissions)!=0
  OR SUM(total_views)!=0
  OR SUM(total_unique_views)!=0
  ORDER BY contest_id;  


--Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:
--Equilateral: It's a triangle with 3 sides of equal length.
--Isosceles: It's a triangle with 2 sides of equal length.
--Scalene: It's a triangle with 3 sides of differing lengths.
--Not A Triangle: The given values of A, B, and C don't form a triangle.
SELECT
  CASE
    WHEN a+b>c AND a+c>b AND b+c>a THEN 
      CASE
        WHEN a=b AND b=c THEN 'Equilateral'
        WHEN a=b OR a=c OR b=c THEN 'Isosceles'
        ELSE 'Scalene' 
      END 
    ELSE 'Not A Triangle' 
  END 
  FROM TRIANGLES;


--Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
--Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format: 
--There are a total of [occupation_count] [occupation]s where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically.
SELECT concat(name, CONCAT("(",CONCAT(SUBSTR(occupation,1,1),")"))) 
    FROM occupations  
    ORDER BY name;

SELECT "There are a total of ", COUNT(occupation), CONCAT(LOWER(occupation),"s.") 
    FROM occupations 
    GROUP BY occupation 
    ORDER BY COUNT(occupation), occupation ASC;
    
    
-Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically and displayed underneath its corresponding Occupation. The output column headers should be Doctor, Professor, Singer, and Actor, respectively.
SELECT
    doctor,
    professor,
    singer,
    actor
FROM (
    SELECT
        name_order,
        MAX(CASE occupation WHEN 'doctor' THEN name END) AS doctor,
        MAX(CASE occupation WHEN 'professor' THEN name END) AS professor,
        MAX(CASE occupation WHEN 'singer' THEN name END) AS singer,
        MAX(CASE occupation WHEN 'actor' THEN name END) AS actor
    FROM (
            SELECT
                occupation,
                name,
                row_number() over(PARTITION BY occupation ORDER BY name) as name_order
            FROM occupations
         ) AS name_lists
    GROUP BY name_order
    ) AS names;
    
--You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, and P is the parent of N.
--Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:
--Root: If node is root node.
--Leaf: If node is leaf node.
--Inner: If node is neither root nor leaf node.
SELECT N, 
    CASE 
        WHEN P IS NULL THEN 'Root' 
        ELSE
            CASE 
                WHEN N IN (SELECT P FROM BST) THEN 'Inner'
                ELSE 'Leaf' 
            END
    END AS node_type
FROM BST
ORDER BY N ASC;





